/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface JournalInterface extends utils.Interface {
  functions: {
    "fileCount()": FunctionFragment;
    "files(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "uploadOutput(string,uint256,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "fileCount" | "files" | "name" | "uploadOutput"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fileCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "files",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uploadOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "fileCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uploadOutput",
    data: BytesLike
  ): Result;

  events: {
    "OutputUploaded(uint256,string,uint256,string,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OutputUploaded"): EventFragment;
}

export interface OutputUploadedEventObject {
  fileId: BigNumber;
  filePath: string;
  fileSize: BigNumber;
  fileType: string;
  fileName: string;
  uploader: string;
}
export type OutputUploadedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, string],
  OutputUploadedEventObject
>;

export type OutputUploadedEventFilter = TypedEventFilter<OutputUploadedEvent>;

export interface Journal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JournalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fileCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    files(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, string] & {
        fileId: BigNumber;
        filePath: string;
        fileSize: BigNumber;
        fileType: string;
        fileName: string;
        uploader: string;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    uploadOutput(
      _filePath: PromiseOrValue<string>,
      _fileSize: PromiseOrValue<BigNumberish>,
      _fileType: PromiseOrValue<string>,
      _fileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fileCount(overrides?: CallOverrides): Promise<BigNumber>;

  files(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, string] & {
      fileId: BigNumber;
      filePath: string;
      fileSize: BigNumber;
      fileType: string;
      fileName: string;
      uploader: string;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  uploadOutput(
    _filePath: PromiseOrValue<string>,
    _fileSize: PromiseOrValue<BigNumberish>,
    _fileType: PromiseOrValue<string>,
    _fileName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fileCount(overrides?: CallOverrides): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, string] & {
        fileId: BigNumber;
        filePath: string;
        fileSize: BigNumber;
        fileType: string;
        fileName: string;
        uploader: string;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    uploadOutput(
      _filePath: PromiseOrValue<string>,
      _fileSize: PromiseOrValue<BigNumberish>,
      _fileType: PromiseOrValue<string>,
      _fileName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OutputUploaded(uint256,string,uint256,string,string,address)"(
      fileId?: null,
      filePath?: null,
      fileSize?: null,
      fileType?: null,
      fileName?: null,
      uploader?: null
    ): OutputUploadedEventFilter;
    OutputUploaded(
      fileId?: null,
      filePath?: null,
      fileSize?: null,
      fileType?: null,
      fileName?: null,
      uploader?: null
    ): OutputUploadedEventFilter;
  };

  estimateGas: {
    fileCount(overrides?: CallOverrides): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    uploadOutput(
      _filePath: PromiseOrValue<string>,
      _fileSize: PromiseOrValue<BigNumberish>,
      _fileType: PromiseOrValue<string>,
      _fileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fileCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    files(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uploadOutput(
      _filePath: PromiseOrValue<string>,
      _fileSize: PromiseOrValue<BigNumberish>,
      _fileType: PromiseOrValue<string>,
      _fileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
